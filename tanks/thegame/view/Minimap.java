/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thegame.view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import thegame.model.Explosion;
import thegame.model.GameData;
import thegame.model.Grenade;
import thegame.model.ModelObject;
import thegame.model.Tank;

/**
 *
 * @author beh01
 */
public class Minimap extends javax.swing.JPanel {

    Image backBuffer;
    //BufferedImage background;
    //BufferedImage tankImage;
    List<ModelObject> model;
    int currentWindowX = 0, currentWindowY = 0;

    /**
     * Creates new form MainPanel
     */
    public Minimap() {
        initComponents();
        backBuffer = new BufferedImage(GameData.MINIMAP_WIDTH, GameData.MINIMAP_HEIGTH, BufferedImage.SCALE_DEFAULT);
        
      
    }

    private int convertX(int x) {
        return x /(GameData.GAME_WIDTH/GameData.MINIMAP_WIDTH); 
    }

    private int convertY(int y) {
        return y /(GameData.GAME_HEIGTH/GameData.MINIMAP_HEIGTH); 
    }

    @Override
    public void paintComponent(Graphics graphic) {
        super.paintComponent(graphic);
        Graphics g = backBuffer.getGraphics();
        g.setColor(Color.GREEN);
        g.fillRect(0, 0, GameData.MINIMAP_WIDTH, GameData.MINIMAP_HEIGTH);
        //System.out.println("currentWindowX "+currentWindowX+" currentWindowY " + currentWindowY);
        if (model != null) { 
            synchronized (model) {
                g.setColor(Color.red);
                g.drawRect(convertX(currentWindowX), convertY(currentWindowY),
                convertX(GameData.WINDOW_WIDTH), convertY(GameData.WINDOW_HEIGTH));
                
                for (ModelObject o : model) {
                    if (o instanceof Tank) {
                        Tank tank = (Tank) o;
                        //BufferedImage tmp = new BufferedImage(50, 50, BufferedImage.BITMASK);
                        //Graphics2D g2D =(Graphics2D)tmp.getGraphics();
                        //g2D.drawImage(tankImage,0,0,50,50,null);
                        //g2D.rotate(tank.getRotation(),25,25);
                        //g.drawImage(tmp, tank.getX(), tank.getY() ,50,50, null);
                  /*      AffineTransform tx = AffineTransform.getRotateInstance(
                                tank.getRotation(), tankImage.getWidth() / 2, tankImage.getHeight() / 2);
                        AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
                       */
                        g.setColor(Color.BLACK);
                        g.fillOval(convertX(o.getX() - GameData.TANK_SIZE), convertY(o.getY() - GameData.TANK_SIZE),
                                8, 8);
                       

                    }
                    if (o instanceof Grenade) {
                        g.setColor(Color.RED);
                        g.fillOval(convertX(o.getX() - 2), convertY(o.getY() - 2), 4, 4);
                    }
                    if (o instanceof Explosion) {
                        g.setColor(Color.ORANGE);
                        g.fillOval(convertX(o.getX() - 30), convertY(o.getY() - 30), 10, 10);
                    }
                    
                    
                    
                }
            }
        }

        //Graphics2D graphic2d = (Graphics2D) graphic;
        //graphic2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
        //      RenderingHints.VALUE_ANTIALIAS_ON);
        graphic.drawImage(backBuffer, 0, 0, this.getWidth(), this.getHeight(), null);

    }

    public void updateModel(List<ModelObject> data) {
        this.model = data;
    }
    public void updateView(int x, int y){
        currentWindowX=x;
        currentWindowY=y;
        convertX(currentWindowX);
        convertX(currentWindowY);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(80, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
